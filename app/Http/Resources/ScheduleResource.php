<?php

namespace App\Http\Resources;

use App\Helpers\GData;
use App\Models\Student;
use App\Models\Teacher;
use App\Helpers\Constants;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

class ScheduleResource extends JsonResource
{
    private static array $available;
    private static array $colors;

    public function __construct ($resource)
    {
        parent::__construct($resource);
        if (empty(self::$colors))
        {
            $this->__initialize();
        }
    }

    /**
     * Transform the resource into an array.
     *
     * @param Request $request
     *
     * @return array
     */
    public function toArray ($request) : array
    {
        $moduleClassAdditionalInfo = str_replace($this->moduleClass->id_module, '',
                                                 $this->moduleClass->id);;
        $moduleName = str_replace($moduleClassAdditionalInfo, '', $this->moduleClass->name);

        if ($this->moduleClass->relationLoaded('teacher'))
        {
            if (!isset(self::$available[$this->moduleClass->id_module]))
            {
                self::$available[$this->moduleClass->id_module] = array_shift(self::$colors);
            }
            $color   = self::$available[$this->moduleClass->id_module];
            $teacher = $this->moduleClass->teacher;
        }
        else
        {
            if (!isset(self::$available[$this->id_module_class]))
            {
                self::$available[$this->id_module_class] = array_shift(self::$colors);
            }
            $color   = self::$available[$this->id_module_class];
            $teacher = 'self';
        }

        if ($this->fixedSchedules->isNotEmpty() &&
            $this->fixedSchedules->last()->status ==
            Constants::FIXED_SCHEDULE_STATUS['approve']['soft'])
        {
            $color = '#cccccc';
        }

        $this->fixedSchedules->transform(function ($item, $key)
        {
            return [
                'id'         => $item->id,
                'idSchedule' => $item->id_schedule,
                'createdAt'  => $item->created_at,
                'oldDate'    => $item->old_date,
                'oldShift'   => $item->old_shift,
                'oldIdRoom'  => $item->old_id_room,
                'newDate'    => $item->new_date,
                'newShift'   => $item->new_shift,
                'newIdRoom'  => $item->new_id_room,
                'intendTime' => $item->intend_time,
                'status'     => $item->status,
            ];
        });

        $response = [
            'id'            => $this->id,
            'idModuleClass' => $this->id_module_class,
            'name'          => $this->moduleClass->name,
            'idRoom'        => $this->id_room,
            'shift'         => $this->shift,
            'date'          => $this->date,
            'numberReality' => $this->moduleClass->number_reality,
            'idModule'      => $this->moduleClass->id_module,
            'moduleName'    => $moduleName,
            'teacher'       => $teacher,
            'color'         => $color,
        ];

        switch ($request->user()->accountable_type)
        {
            case Student::class:
                break;

            case Teacher::class:
                $response['fixedSchedules'] = $this->fixedSchedules;
                $response['note']           = $this->note;
                break;
        }

        return $response;
    }

    public static function collection ($resource) : AnonymousResourceCollection
    {
        return parent::collection($resource); // TODO: Change the autogenerated stub
    }

    private function __initialize ()
    {
        self::$colors    = GData::$colors;
        self::$available = [];
    }
}
